链接：https://www.nowcoder.com/questionTerminal/9deb03b935ec4fd288a8ee5d20364581?answerType=1&f=discussion
来源：牛客网

题目背景：

“曾经有两次消除的机会摆在我面前，我却没有珍惜……”牛牛回忆道。

牛牛正在玩一款全新的消消乐游戏。这款游戏的主体是由一列列的方块构成，牛牛的目标就是要尽量消除这些方块。

每次操作，牛牛可以选择某个高度 x，将所有高度大于等于 x 的那些列全部消除 x 个方块，随后方块会下落，以填补消除造成的空白。

牛牛这一局的发挥极佳，眼看就要破纪录了，却发现自己只剩下了两次消除机会。

为了不错失这千载难逢的机会，他决定写个程序来算出最优解。


简明题意：

给定一个数组 nums，其中有 n 个非负整数。你的目的是进行两次操作，使得数组的元素之和最小。
每次操作形如：任选一个整数 x ，将数组中所有大于等于 x 的数减去 x 。



  import java.util.*;

    public class Main {

        /**
         * 返回两次操作后，数组元素之和的最小值
         * @param nums int整型一维数组 这你你需要操作的数组
         * @return long长整型
         */
        public long minimumValueAfterDispel (int[] nums) {
            // write code here
            /*
             * b×cnt[b,a)+a×cnt[a,a+b)+(a+b)×cnt[a+b,∞)
             * 跃阶函数
             */
            Arrays.sort(nums);
            long sum = 0;
            long max = 0;
            int len = nums.length;

            for(int j=0; j<len; j++){
                sum += nums[j];

                int index = j;
                int index2 = j;
                int index3 = j;
                //遍历
                for(int i=0; i<=j; i++){
                    //情况1，第一次是减去nums[j],第二次减去nums[i]. index返回的是最a+b 的元素位置
                    while(index < len && (long)nums[index] < (long)nums[i] + nums[j]) {
                        index++;
                    }
                    long tmp1 = (len-j)*(long)nums[j] + (len-index+j-i)*(long)nums[i];

                    //情况2，第一次是减去nums[i],第二次减去nums[j]-nums[i]， index2返回的是最靠近边界b的元素位置
                    while(index2 > 0 && nums[index2-1] >= nums[j] - nums[i]) {
                        index2--;
                    }
                    long tmp2 = (len-i)*(long)nums[i] + (len-j+i-index2)*((long)nums[j]-nums[i]);

                    //情况3，第一次是减去nums[j]-nums[i],第二次减去nums[j].
                    while(index3 > i && nums[index3-1] >= nums[j] - nums[i]){
                        index3--;
                    }
                    long tmp3 = (long)nums[i]*(index3 -i) + ((long)nums[j]-nums[i])*(j-index3) + (long)nums[j]*(len-j);

                    max = Math.max(max, tmp1);
                    max = Math.max(max, tmp2);
                    max = Math.max(max, tmp3);
                }
            }
            return sum - max;
  }
}




